trigger:
- main

pool:
  name : default
  demands: 
  - agent.name -equals dockeragent-soul-agent

variables:
  tag: '$(Build.BuildId)'
  repositoryName: jesaregistry/jesa-php
  phpVersion: 8.2.27
  # passwordFilePath: '/run/secrets/db_password'

# services:
#   mysql:
#     image: mysql:8.0
#     env:
#       MYSQL_ROOT_PASSWORD: password
#       MYSQL_DATABASE: mydatabase

steps:
- script: |
       update-alternatives --set php /usr/bin/php$(phpVersion)
       update-alternatives --set phar /usr/bin/phar$(phpVersion)
       update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
       update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
       update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
       php -version
  displayName: 'Use PHP version $(phpVersion)'

- script: composer install --no-interaction --prefer-dist
  displayName: 'composer install'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'vendor'
    ArtifactName: 'vendor-artifact'
    publishLocation: 'Container'

# Run tests
# - script: |
#     ./vendor/bin/phpunit tests/HelloWorldTest.php --log-junit test-results.xml
#   displayName: 'Run PHPUnit Tests'
#   continueOnError: true  # Ensure pipeline continues even if tests fail

# - task: PublishTestResults@2
#   displayName: 'Publish Test Results'
#   inputs:
#     testResultsFiles: 'test-results.xml'
#     testRunTitle: 'PHPUnit Test Results'
#     testResultsFormat: 'JUnit'
# # - task: DownloadBuildArtifacts@0
# #   inputs:
# #     artifactName: 'vendor-artifact'
# #     downloadPath: '$(Build.ArtifactStagingDirectory)'
- task: Docker@2
  inputs:
    containerRegistry: acr-registry #dockerhub
    repository: $(repositoryName)
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    # buildContext: '$(Build.SourcesDirectory)'
    
    arguments: |
      --build-arg DB_HOST=$(DB_HOST)
      --build-arg DB_NAME=$(DB_NAME)
      --build-arg DB_USER=$(DB_USER)
      --build-arg DB_PASSWORD=$(DB_PASSWORD)
      --build-arg VENDOR_ARTIFACT=vendor-artifact
    tags: |
      $(tag)

# - script: |
#     docker build -t myapp:latest .
#   displayName: 'Build Docker image'
 

